{"ast":null,"code":"const express = require('express');\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\nconst app = express();\n\n// Create a checkout session endpoint\napp.post('/create-checkout-session', async (req, res) => {\n  try {\n    const {\n      items\n    } = req.body; // Assuming the request contains the items for purchase\n\n    // Create a Stripe Checkout Session\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: items.map(item => ({\n        price_data: {\n          currency: 'ind',\n          product_data: {\n            name: item.name\n            // Other product details like description, images, etc.\n          },\n\n          unit_amount: item.price * 100 // Convert price to cents\n        },\n\n        quantity: item.quantity\n      })),\n      mode: 'payment',\n      success_url: 'https://yourdomain.com/success',\n      // URL to redirect on successful payment\n      cancel_url: 'https://yourdomain.com/cancel' // URL to redirect on cancelled payment\n    });\n\n    res.json({\n      id: session.id\n    }); // Return the session ID to the client\n  } catch (error) {\n    console.error('Error creating checkout session:', error);\n    res.status(500).send({\n      error: 'Unable to create checkout session'\n    });\n  }\n});\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});","map":{"version":3,"names":["express","require","stripe","process","env","STRIPE_SECRET_KEY","app","post","req","res","items","body","session","checkout","sessions","create","payment_method_types","line_items","map","item","price_data","currency","product_data","name","unit_amount","price","quantity","mode","success_url","cancel_url","json","id","error","console","status","send","listen","log"],"sources":["D:/AGRIDUCT/frontend/src/page/Payment.js"],"sourcesContent":["const express = require('express');\r\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\r\nconst app = express();\r\n\r\n// Create a checkout session endpoint\r\napp.post('/create-checkout-session', async (req, res) => {\r\n  try {\r\n    const { items } = req.body; // Assuming the request contains the items for purchase\r\n\r\n    // Create a Stripe Checkout Session\r\n    const session = await stripe.checkout.sessions.create({\r\n      payment_method_types: ['card'],\r\n      line_items: items.map(item => ({\r\n        price_data: {\r\n          currency: 'ind',\r\n          product_data: {\r\n            name: item.name,\r\n            // Other product details like description, images, etc.\r\n          },\r\n          unit_amount: item.price * 100, // Convert price to cents\r\n        },\r\n        quantity: item.quantity,\r\n      })),\r\n      mode: 'payment',\r\n      success_url: 'https://yourdomain.com/success', // URL to redirect on successful payment\r\n      cancel_url: 'https://yourdomain.com/cancel', // URL to redirect on cancelled payment\r\n    });\r\n\r\n    res.json({ id: session.id }); // Return the session ID to the client\r\n  } catch (error) {\r\n    console.error('Error creating checkout session:', error);\r\n    res.status(500).send({ error: 'Unable to create checkout session' });\r\n  }\r\n});\r\n\r\napp.listen(3000, () => {\r\n  console.log('Server is running on port 3000');\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACE,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;AAC/D,MAAMC,GAAG,GAAGN,OAAO,EAAE;;AAErB;AACAM,GAAG,CAACC,IAAI,CAAC,0BAA0B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvD,IAAI;IACF,MAAM;MAAEC;IAAM,CAAC,GAAGF,GAAG,CAACG,IAAI,CAAC,CAAC;;IAE5B;IACA,MAAMC,OAAO,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACC,QAAQ,CAACC,MAAM,CAAC;MACpDC,oBAAoB,EAAE,CAAC,MAAM,CAAC;MAC9BC,UAAU,EAAEP,KAAK,CAACQ,GAAG,CAACC,IAAI,KAAK;QAC7BC,UAAU,EAAE;UACVC,QAAQ,EAAE,KAAK;UACfC,YAAY,EAAE;YACZC,IAAI,EAAEJ,IAAI,CAACI;YACX;UACF,CAAC;;UACDC,WAAW,EAAEL,IAAI,CAACM,KAAK,GAAG,GAAG,CAAE;QACjC,CAAC;;QACDC,QAAQ,EAAEP,IAAI,CAACO;MACjB,CAAC,CAAC,CAAC;MACHC,IAAI,EAAE,SAAS;MACfC,WAAW,EAAE,gCAAgC;MAAE;MAC/CC,UAAU,EAAE,+BAA+B,CAAE;IAC/C,CAAC,CAAC;;IAEFpB,GAAG,CAACqB,IAAI,CAAC;MAAEC,EAAE,EAAEnB,OAAO,CAACmB;IAAG,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxDvB,GAAG,CAACyB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEH,KAAK,EAAE;IAAoC,CAAC,CAAC;EACtE;AACF,CAAC,CAAC;AAEF1B,GAAG,CAAC8B,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBH,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}