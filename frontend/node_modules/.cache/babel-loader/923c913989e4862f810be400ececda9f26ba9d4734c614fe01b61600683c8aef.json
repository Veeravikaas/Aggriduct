{"ast":null,"code":"var _jsxFileName = \"D:\\\\AGRIDUCT\\\\frontend\\\\src\\\\page\\\\orderstatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { toast } from \"react-hot-toast\"; // Import the 'toast' variable from the relevant library\nimport { useSelector, useDispatch } from \"react-redux\";\n// ... (other imports)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Orderstatus = () => {\n  _s();\n  const [orderIdToCheck, setOrderIdToCheck] = useState(\"\"); // State to hold the order ID for status checking\n  const [orderStatus, setOrderStatus] = useState(\"\"); // State to hold the order status\n\n  // Function to check order status\n  const checkOrderStatus = orderId => {\n    // Simulating status retrieval from an API or database\n    const orderStatuses = {\n      \"123456\": \"Processing\",\n      \"789012\": \"Shipped\",\n      \"345678\": \"Delivered\"\n      // Add more order IDs and statuses as needed\n    };\n\n    const status = orderStatuses[orderId];\n    if (status) {\n      setOrderStatus(`Order ID ${orderId} status: ${status}`);\n    } else {\n      setOrderStatus(`Order ID ${orderId} not found or status not available`);\n    }\n  };\n\n  // Function to handle checking order status\n  const handleCheckOrderStatus = () => {\n    if (orderIdToCheck.trim() === \"\") {\n      // Check if order ID is provided\n      toast.error(\"Please provide an order ID.\");\n      return;\n    }\n\n    // Call function to check order status\n    checkOrderStatus(orderIdToCheck);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"i\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Orderstatus, \"Ji7gn7X+5TfQmII70y9imAGDqeY=\");\n_c = Orderstatus;\nexport default Orderstatus;\nvar _c;\n$RefreshReg$(_c, \"Orderstatus\");","map":{"version":3,"names":["React","useState","toast","useSelector","useDispatch","Orderstatus","orderIdToCheck","setOrderIdToCheck","orderStatus","setOrderStatus","checkOrderStatus","orderId","orderStatuses","status","handleCheckOrderStatus","trim","error"],"sources":["D:/AGRIDUCT/frontend/src/page/orderstatus.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { toast } from \"react-hot-toast\"; // Import the 'toast' variable from the relevant library\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// ... (other imports)\r\n\r\nconst Orderstatus = () => {\r\n  const [orderIdToCheck, setOrderIdToCheck] = useState(\"\"); // State to hold the order ID for status checking\r\n  const [orderStatus, setOrderStatus] = useState(\"\"); // State to hold the order status\r\n\r\n  // Function to check order status\r\n  const checkOrderStatus = (orderId) => {\r\n    // Simulating status retrieval from an API or database\r\n    const orderStatuses = {\r\n      \"123456\": \"Processing\",\r\n      \"789012\": \"Shipped\",\r\n      \"345678\": \"Delivered\",\r\n      // Add more order IDs and statuses as needed\r\n    };\r\n\r\n    const status = orderStatuses[orderId];\r\n\r\n    if (status) {\r\n      setOrderStatus(`Order ID ${orderId} status: ${status}`);\r\n    } else {\r\n      setOrderStatus(`Order ID ${orderId} not found or status not available`);\r\n    }\r\n  };\r\n\r\n  // Function to handle checking order status\r\n  const handleCheckOrderStatus = () => {\r\n    if (orderIdToCheck.trim() === \"\") {\r\n      // Check if order ID is provided\r\n      toast.error(\"Please provide an order ID.\");\r\n      return;\r\n    }\r\n\r\n    // Call function to check order status\r\n    checkOrderStatus(orderIdToCheck);\r\n  };\r\n\r\n  return (\r\n    <div className=\"i\">\r\n      {/* ... (existing JSX) */}\r\n      <form>\r\n        \r\n\r\n      </form>\r\n      \r\n      {/* ... (existing JSX) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orderstatus;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,iBAAiB,CAAC,CAAC;AACzC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AAAA;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAMS,gBAAgB,GAAIC,OAAO,IAAK;IACpC;IACA,MAAMC,aAAa,GAAG;MACpB,QAAQ,EAAE,YAAY;MACtB,QAAQ,EAAE,SAAS;MACnB,QAAQ,EAAE;MACV;IACF,CAAC;;IAED,MAAMC,MAAM,GAAGD,aAAa,CAACD,OAAO,CAAC;IAErC,IAAIE,MAAM,EAAE;MACVJ,cAAc,CAAE,YAAWE,OAAQ,YAAWE,MAAO,EAAC,CAAC;IACzD,CAAC,MAAM;MACLJ,cAAc,CAAE,YAAWE,OAAQ,oCAAmC,CAAC;IACzE;EACF,CAAC;;EAED;EACA,MAAMG,sBAAsB,GAAG,MAAM;IACnC,IAAIR,cAAc,CAACS,IAAI,EAAE,KAAK,EAAE,EAAE;MAChC;MACAb,KAAK,CAACc,KAAK,CAAC,6BAA6B,CAAC;MAC1C;IACF;;IAEA;IACAN,gBAAgB,CAACJ,cAAc,CAAC;EAClC,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,GAAG;IAAA,uBAEhB;MAAA;MAAA;MAAA;IAAA;EAGO;IAAA;IAAA;IAAA;EAAA,QAGH;AAEV,CAAC;AAAC,GA9CID,WAAW;AAAA,KAAXA,WAAW;AAgDjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}