{"ast":null,"code":"var _jsxFileName = \"D:\\\\AGRIDUCT\\\\frontend\\\\src\\\\page\\\\orderstatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderDetail = _ref => {\n  _s();\n  let {\n    orderId\n  } = _ref;\n  const [orderDetails, setOrderDetails] = useState(null);\n  const userToken = useSelector(state => state.user.token); // Assuming token is stored in Redux state\n\n  useEffect(() => {\n    fetchOrderDetails();\n  }, []);\n  const fetchOrderDetails = async () => {\n    if (userToken) {\n      try {\n        const response = await axios.get(`http://localhost:8080/orders/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${userToken}`\n          }\n        });\n        if (response.status === 200) {\n          setOrderDetails(response.data); // Assuming response.data contains order details\n        } else {\n          console.error(\"Failed to fetch order details\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching order details:\", error);\n      }\n    }\n  };\n  if (!orderDetails) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this); // Or handle the case where orderDetails is not available yet\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Order Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order ID: \", orderDetails.orderId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", orderDetails.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Item Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: orderDetails.items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.total\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, item._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderDetail, \"eqaJQ90eORKe4JXhGwphL7iTlAs=\", false, function () {\n  return [useSelector];\n});\n_c = OrderDetail;\nexport default OrderDetail;\nvar _c;\n$RefreshReg$(_c, \"OrderDetail\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","axios","OrderDetail","orderId","orderDetails","setOrderDetails","userToken","state","user","token","fetchOrderDetails","response","get","headers","Authorization","status","data","console","error","date","items","map","item","name","price","quantity","total","_id"],"sources":["D:/AGRIDUCT/frontend/src/page/orderstatus.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst OrderDetail = ({ orderId }) => {\r\n  const [orderDetails, setOrderDetails] = useState(null);\r\n  const userToken = useSelector((state) => state.user.token); // Assuming token is stored in Redux state\r\n\r\n  useEffect(() => {\r\n    fetchOrderDetails();\r\n  }, []);\r\n\r\n  const fetchOrderDetails = async () => {\r\n    if (userToken) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/orders/${orderId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${userToken}`,\r\n          },\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          setOrderDetails(response.data); // Assuming response.data contains order details\r\n        } else {\r\n          console.error(\"Failed to fetch order details\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching order details:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!orderDetails) {\r\n    return <div>Loading...</div>; // Or handle the case where orderDetails is not available yet\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Order Details</h2>\r\n      <div>\r\n        <p>Order ID: {orderDetails.orderId}</p>\r\n        <p>Date: {orderDetails.date}</p>\r\n        {/* Display other order details as needed */}\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Item Name</th>\r\n            <th>Price</th>\r\n            <th>Quantity</th>\r\n            <th>Total</th>\r\n            {/* Add more table headers if needed */}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {orderDetails.items.map((item) => (\r\n            <tr key={item._id}>\r\n              <td>{item.name}</td>\r\n              <td>{item.price}</td>\r\n              <td>{item.quantity}</td>\r\n              <td>{item.total}</td>\r\n              {/* Add more table cells if needed */}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderDetail;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,WAAW,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMQ,SAAS,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;;EAE5DV,SAAS,CAAC,MAAM;IACdW,iBAAiB,EAAE;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,iBAAiB,GAAG,YAAY;IACpC,IAAIJ,SAAS,EAAE;MACb,IAAI;QACF,MAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,gCAA+BT,OAAQ,EAAC,EAAE;UAC1EU,OAAO,EAAE;YACPC,aAAa,EAAG,UAASR,SAAU;UACrC;QACF,CAAC,CAAC;QAEF,IAAIK,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAC3BV,eAAe,CAACM,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;QAClC,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAAC,+BAA+B,CAAC;QAChD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC;EAED,IAAI,CAACd,YAAY,EAAE;IACjB,oBAAO;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM,CAAC,CAAC;EAChC;;EAEA,oBACE;IAAA,wBACE;MAAA,UAAI;IAAa;MAAA;MAAA;MAAA;IAAA,QAAK,eACtB;MAAA,wBACE;QAAA,WAAG,YAAU,EAACA,YAAY,CAACD,OAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK,eACvC;QAAA,WAAG,QAAM,EAACC,YAAY,CAACe,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAE5B,eACN;MAAA,wBACE;QAAA,uBACE;UAAA,wBACE;YAAA,UAAI;UAAS;YAAA;YAAA;YAAA;UAAA,QAAK,eAClB;YAAA,UAAI;UAAK;YAAA;YAAA;YAAA;UAAA,QAAK,eACd;YAAA,UAAI;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAK,eACjB;YAAA,UAAI;UAAK;YAAA;YAAA;YAAA;UAAA,QAAK;QAAA;UAAA;UAAA;UAAA;QAAA;MAEX;QAAA;QAAA;QAAA;MAAA,QACC,eACR;QAAA,UACGf,YAAY,CAACgB,KAAK,CAACC,GAAG,CAAEC,IAAI,iBAC3B;UAAA,wBACE;YAAA,UAAKA,IAAI,CAACC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAM,eACpB;YAAA,UAAKD,IAAI,CAACE;UAAK;YAAA;YAAA;YAAA;UAAA,QAAM,eACrB;YAAA,UAAKF,IAAI,CAACG;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAM,eACxB;YAAA,UAAKH,IAAI,CAACI;UAAK;YAAA;YAAA;YAAA;UAAA,QAAM;QAAA,GAJdJ,IAAI,CAACK,GAAG;UAAA;UAAA;UAAA;QAAA,QAOlB;MAAC;QAAA;QAAA;QAAA;MAAA,QACI;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV,CAAC;AAAC,GAhEIzB,WAAW;EAAA,QAEGF,WAAW;AAAA;AAAA,KAFzBE,WAAW;AAkEjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}